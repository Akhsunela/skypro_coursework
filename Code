-----ФИНАЛЬНАЯ ЧАСТЬ КР

with first_payments as (
 select user_id
  , min(transaction_datetime)::date as first_payment_date
  from skyeng_DB.payments
  where id_transaction is not null and 
  status_name = 'success'
  group by user_id
  order by user_id asc ---Шаг 1. Когда была транзакция для каждого студента.Начиная с этой даты собирается баланс уроков 
), 
all_dates as (
 select distinct date_trunc('day', class_start_datetime) as dt
from skyeng_DB.classes
where extract(year from class_start_datetime) = 2016
group by dt
order by dt -- Шаг 2. Все даты 2016 года
),
all_dates_by_user as (
     select user_id
   , dt
    from first_payments
  join all_dates on all_dates.dt >= first_payments.first_payment_date
  order by user_id, dt --Шаг 3. Все даты жизни студента после его первой транзакции. 
),
payments_by_dates as (
  select user_id 
    ,  date(transaction_datetime) as payment_date
    ,  sum(classes) as transaction_balance_change
from skyeng_DB.payments
where status_name = 'success'
group by user_id, payment_date
order by user_id ---Шаг 4. Изменения балансов, связанные с успешными транзакциями (сколько уроков было начислено или списано в этот день)
),
   payments_by_dates_cumsum as (
 select all_dates_by_user.user_id
 , dt
 , transaction_balance_change
 , sum(coalesce(transaction_balance_change, 0)) over (partition by all_dates_by_user.user_id order by dt) as transaction_balance_change_cs
 from all_dates_by_user as all_dates_by_user
 left join payments_by_dates as payments_by_dates on all_dates_by_user.user_id = payments_by_dates.user_id and all_dates_by_user.dt = payments_by_dates.payment_date
 ), ---Шаг 5. Баланс студентов, сформированный только транзакциями. 
classes_by_dates as (
    select user_id 
         ,   date_trunc('day', class_start_datetime) as class_date 
         ,   count(id_class)*-1 as classes
    from skyeng_DB.classes
    where (class_status = 'success' or  class_status = 'failed_by_student') and class_type != 'trial'
    group by user_id, class_date ---Шаг 6. Изменения балансов из-за прохождения уроков
),
classes_by_dates_cumsum as (
select all_dates_by_user.user_id
    , dt
    , classes 
    , sum(coalesce(classes,0)) over (partition by all_dates_by_user.user_id order by dt) as classes_cs
from all_dates_by_user as all_dates_by_user
    left join classes_by_dates as classes_by_dates on all_dates_by_user.user_id = classes_by_dates.user_id and all_dates_by_user.dt = classes_by_dates.class_date
    ), ---Шаг 7. Создание СТЕ для хранения кумулятивной суммы количества пройденных уроков. 
balances as 
(select 
      payments_by_dates_cumsum.user_id
    , payments_by_dates_cumsum.dt
    , transaction_balance_change
    , transaction_balance_change_cs
    , classes
    , classes_cs
    , classes_cs + transaction_balance_change_cs as balances
from payments_by_dates_cumsum as payments_by_dates_cumsum
 left join classes_by_dates_cumsum as classes_by_dates_cumsum on payments_by_dates_cumsum.user_id = classes_by_dates_cumsum.user_id
  and payments_by_dates_cumsum.dt = classes_by_dates_cumsum.dt ---Шаг 8. Вычисленные балансы каждого студента. 
  )
--   select * -- задание 1. Выберите топ-1000 строк из CTE balances с сортировкой по user_id и dt. Посмотрите на изменения балансов студентов. 
-- from balances
-- order by user_id, dt
--limit 1000
    select
        dt 
      , sum(transaction_balance_change) as sum_transaction_balance_change --изменение баланса из-за оплат, корректировок и т.д.
      , sum(transaction_balance_change_cs) as sum_transaction_balance_change_cs --кумулятивная сумма изменений  баланса из-за оплат, корректировок и т.д.
      , sum(classes) as sum_classes -- динамика баланса из-за прохождения уроков
      , sum(classes_cs) as sum_classes_cs -- кумулятивная сумма динамик баланса из-за уроков
      , sum(balances) as sum_balance --суммарное количество уроков на балансе
  from balances
  group by dt
  order by dt ---Шаг 9. Необходимо посмотреть, как менялось общее количество уроков на балансах студентов
  
